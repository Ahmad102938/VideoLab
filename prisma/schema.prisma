// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  createdAt      DateTime  @default(now())
  podcasts       Podcast[]
}

model Podcast {
  id              String             @id @default(cuid())
  userId          String
  title           String
  description     String             @default("")
  hosts           String[]           @default([])        // <-- “Alice”, “Bob”, etc.
  status          String             @default("DRAFT_PENDING_REVIEW")
  finalAudioUrl   String?
  createdAt       DateTime           @default(now())
  hostAssignments HostAssignment[]
  script          Script?

  user            User               @relation(fields: [userId], references: [id])
}

model HostAssignment {
  id            String    @id @default(cuid())
  podcastId     String
  hostName      String
  voiceId       String?                      // unknown until user picks
  provider      String?                      // unknown until user picks
  segmentIndex  Int?       @default(0)        // if you want per‐segment detail

  podcast       Podcast    @relation(fields: [podcastId], references: [id])

  @@index([podcastId])
}

model Script {
  id          String    @id @default(cuid())
  podcastId   String    @unique

  // Entire transcript in one string:
  fullText    String

  // JSON array of segment objects: [{hostName, text, segmentIndex}, …]
  segments    Json

  // Once the user assigns voices, flip to “SYNTHESIS_PENDING”
  status      String    @default("READY_FOR_ASSIGNMENT")
  updatedAt   DateTime  @updatedAt

  podcast     Podcast   @relation(fields: [podcastId], references: [id])
}
